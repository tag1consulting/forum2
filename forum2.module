<?php
// $Id: $

/**
 * Implements hook_menu().
 */
function forum2_menu() {
  $items['forum'] = array(
    'title' => 'Forums',
    'page callback' => 'forum2_page',
    'access arguments' => array('access content'),
    'file' => 'forum2.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_cron().
 */
function forum2_cron() {
  $max_nid = variable_get('forum2_index_nid', 0);
  $batch_size = variable_get('forum2_batch_size', 1000);
  if ($max_nid) {
    $last_nid = FALSE;
    $result = db_query_range("SELECT n.nid, n.title, n.sticky, n.created, f.tid, ncs.last_comment_timestamp, ncs.comment_count FROM {node} n INNER JOIN {forum} f ON n.vid = f.vid INNER JOIN {node_comment_statistics} ncs ON n.nid = ncs.nid WHERE n.nid <= %d ORDER BY n.nid DESC", $max_nid, 0, $batch_size);
    $count = 0;

    while ($row = db_fetch_object($result)) {
      db_query("DELETE FROM {forum2_index} WHERE nid = %d", $row->nid);
      drupal_write_record('forum2_index', $row);

      // Note that we have indexed at least one node.
      $last_nid = $row->nid;

      $count++;
    }

    if ($last_nid !== FALSE) {
      // Prepare a starting point for the next run.
      variable_set('forum2_index_nid', $last_nid - 1);

      watchdog('forum2', 'Indexed %count nodes for tracking.', array('%count' => $count));
    }
    else {
      // If all nodes have been indexed, set to zero to skip future cron runs.
      variable_set('forum2_index_nid', 0);
    }
  }
}

/*
 * Implementation of hook_block().
 *
 * Generates a block containing the currently active forum topics and the
 * most recently added forum topics.
 */
function forum2_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Active forum topics');
      $blocks[1]['info'] = t('New forum topics');
      return $blocks;

    case 'configure':
      $form['forum_block_num_'. $delta] = array('#type' => 'select', '#title' => t('Number of topics'), '#default_value' => variable_get('forum_block_num_'. $delta, '5'), '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)));
      return $form;

    case 'save':
      variable_set('forum_block_num_'. $delta, $edit['forum_block_num_'. $delta]);
      break;

    case 'view':
      if (user_access('access content')) {
        switch ($delta) {
          case 0:
            $title = t('Active forum topics');
            $sql = db_rewrite_sql("SELECT f.nid, f.title, f.comment_count, f.last_comment_timestamp FROM {forum2_index} f ORDER BY f.last_comment_timestamp DESC");
            $result = db_query_range($sql, variable_get('forum_nav_vocabulary', ''), 0, variable_get('forum_block_num_0', '5'));
            $content = node_title_list($result);
            break;

          case 1:
            $title = t('New forum topics');
            $sql = db_rewrite_sql("SELECT f.nid, f.title, f.comment_count FROM {forum2_index} f ORDER BY f.nid DESC");
            $result = db_query_range($sql, variable_get('forum_nav_vocabulary', ''), 0, variable_get('forum_block_num_1', '5'));
            $content = node_title_list($result);
            break;
        }

        if (!empty($content)) {
          $block['subject'] = $title;
          $block['content'] = $content . theme('more_link', url('forum'), t('Read the latest forum topics.'));
          return $block;
        }
      }
  }
}

/**
 * Implementation of hook_comment().
 */
function forum2_comment(&$comment, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      return forum2_comment_update($comment);
    case 'delete':
      return forum2_comment_delete($comment);
    case 'publish':
      return forum2_comment_publish($comment);
    case 'unpublish':
      return forum2_comment_unpublish($comment);
  }
}

/**
 * Returns a list of all forums for a given taxonomy id
 *
 * Forum objects contain the following fields:
 *  - num_topics: Number of topics in the forum
 *  - num_posts:  Total number of posts in all topics
 *  - last_post:  Most recent post for the forum
 *
 * @param $tid
 *   Taxonomy ID of the vocabulary that holds the forum list.
 * @return
 *   Array of object containing the forum information.
 */
function forum2_get_forums($tid = 0) {
  $forums = array();
  $vid = variable_get('forum_nav_vocabulary', '');
  $_forums = taxonomy_get_tree($vid, $tid);

  if (count($_forums)) {
    $counts = array();
    $sql = "SELECT f.tid, COUNT(f.nid) AS topic_count, SUM(f.comment_count) AS comment_count FROM {forum2_index} f GROUP BY f.tid";
    $sql = db_rewrite_sql($sql);
    $_counts = db_query($sql);
    while ($count = db_fetch_object($_counts)) {
      $counts[$count->tid] = $count;
    }
  }

  foreach ($_forums as $forum) {
    if (in_array($forum->tid, variable_get('forum_containers', array()))) {
      $forum->container = 1;
    }

    if (!empty($counts[$forum->tid])) {
      $forum->num_topics = $counts[$forum->tid]->topic_count;
      $forum->num_posts = $counts[$forum->tid]->topic_count + $counts[$forum->tid]->comment_count;
    }
    else {
      $forum->num_topics = 0;
      $forum->num_posts = 0;
    }

    // This query does not use full ANSI syntax since MySQL 3.x does not support
    // table1 INNER JOIN table2 INNER JOIN table3 ON table2_criteria ON
    // table3_criteria used to join node_comment_statistics to users.
    $sql = "SELECT f.last_comment_timestamp, IF (ncs.last_comment_uid != 0, u2.name, ncs.last_comment_name) AS last_comment_name, ncs.last_comment_uid FROM {forum2_index} f INNER JOIN {node} n ON f.nid = n.nid INNER JOIN {users} u1 ON n.uid = u1.uid INNER JOIN {node_comment_statistics} ncs ON n.nid = ncs.nid INNER JOIN {users} u2 ON ncs.last_comment_uid=u2.uid WHERE f.tid = %d ORDER BY f.last_comment_timestamp DESC";
    $sql = db_rewrite_sql($sql);
    $topic = db_fetch_object(db_query_range($sql, $forum->tid, 0, 1));

    $last_post = new stdClass();
    if (!empty($topic->last_comment_timestamp)) {
      $last_post->timestamp = $topic->last_comment_timestamp;
      $last_post->name = $topic->last_comment_name;
      $last_post->uid = $topic->last_comment_uid;
    }
    $forum->last_post = $last_post;

    $forums[$forum->tid] = $forum;
  }

  return $forums;
}

/**
 * Implementation of hook_nodeapi().
 */
function forum2_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'insert':
      db_query("INSERT INTO {forum2_index} (nid, title, tid, sticky, created, comment_count, last_comment_timestamp) values(%d, '%s', %d, %d, %d, %d, %d)", $node->nid, $node->title, $node->tid, $node->sticky, $node->created, 0, $node->created);
      break;
    case 'delete':
      db_query('DELETE FROM {forum2_index} WHERE nid = %d', $node->nid);
      break;
  }
}

/**
 * Calculate the number of nodes the user has not yet read and are newer
 * than NODE_NEW_LIMIT.
 */
function _forum2_topics_unread($term, $uid) {
  $sql = "SELECT COUNT(n.nid) FROM {node} n INNER JOIN {term_node} tn ON n.vid = tn.vid AND tn.tid = %d LEFT JOIN {history} h ON n.nid = h.nid AND h.uid = %d WHERE n.status = 1 AND n.created > %d AND h.nid IS NULL";
  $sql = db_rewrite_sql($sql);
  return db_result(db_query($sql, $term, $uid, NODE_NEW_LIMIT));
}

function forum2_get_topics($tid, $sortby, $forum_per_page) {
  global $user, $forum_topic_list_header;

  $forum_topic_list_header = array(
    NULL,
    array('data' => t('Topic'), 'field' => 'f.title'),
    array('data' => t('Replies'), 'field' => 'f.comment_count'),
    array('data' => t('Created'), 'field' => 'f.created'),
    array('data' => t('Last reply'), 'field' => 'f.last_comment_timestamp'),
  );

  // Set sort order in header array based on administrative configuration.
  foreach (_forum2_get_topic_order($sortby) as $key => $order) {
    $forum_topic_list_header[$key]['sort'] = $order;
  }

  $term = taxonomy_get_term($tid);

  $sql = db_rewrite_sql("SELECT f.nid, f.tid, f.title, n.type, f.sticky, u.name, u.uid, f.created AS timestamp, n.comment AS comment_mode, f.last_comment_timestamp, IF(l.last_comment_uid != 0, cu.name, l.last_comment_name) AS last_comment_name, l.last_comment_uid, l.comment_count AS num_comments, f.tid AS forum_tid FROM {forum2_index} f INNER JOIN {node_comment_statistics} l ON f.nid=l.nid INNER JOIN {node} n ON n.nid = l.nid INNER JOIN {users} cu ON l.last_comment_uid = cu.uid INNER JOIN {users} u ON n.uid = u.uid WHERE f.tid = %d");
  $sql .= tablesort_sql($forum_topic_list_header, 'f.sticky DESC,');
  $sql_count = db_rewrite_sql("SELECT COUNT(f.nid) FROM {forum2_index} f WHERE f.tid = %d");

  $result = pager_query($sql, $forum_per_page, 0, $sql_count, $tid);
  $topics = array();
  while ($topic = db_fetch_object($result)) {
    if ($user->uid) {
      // folder is new if topic is new or there are new comments since last visit
      if ($topic->tid != $tid) {
        $topic->new = 0;
      }
      else {
        $history = _forum_user_last_visit($topic->nid);
        $topic->new_replies = comment_num_new($topic->nid, $history);
        $topic->new = $topic->new_replies || ($topic->timestamp > $history);
      }
    }
    else {
      // Do not track "new replies" status for topics if the user is anonymous.
      $topic->new_replies = 0;
      $topic->new = 0;
    }

    if ($topic->num_comments > 0) {
      $last_reply = new stdClass();
      $last_reply->timestamp = $topic->last_comment_timestamp;
      $last_reply->name = $topic->last_comment_name;
      $last_reply->uid = $topic->last_comment_uid;
      $topic->last_reply = $last_reply;
    }
    $topics[] = $topic;
  }

  return $topics;
}

function _forum2_get_topic_order($sortby) {
  switch ($sortby) {
    case 1:
      // Sort by f.last_comment_timestamp desc
      return array('4' => 'desc');
    case 2:
      // Sort by f.last_comment_timestamp asc
      return array('4' => 'asc');
    case 3:
      // Sort by f.comment_count desc
      return array('3' => 'desc');
    case 4:
      // Sort by f.comment_count asc
      return array('3' => 'asc');
  }
}

/**
 * Implementation of hook_comment_publish().
 *
 * This actually handles the insert and update of published nodes since
 * comment_save() calls hook_comment_publish() for all published comments.
 */
function forum2_comment_publish($comment) {
  forum2_update_forum2_index($comment['nid']);
}

/**
 * Implementation of hook_comment_update().
 *
 * Comment module doesn't call hook_comment_unpublish() when saving individual
 * comments so we need to check for those here.
 */
function forum2_comment_update($comment) {
  forum2_update_forum2_index($comment['nid']);
}

/**
 * Implementation of hook_comment_unpublish().
 */
function forum2_comment_unpublish($comment) {
  forum2_update_forum2_index($comment['nid']);
}

/**
 * Implementation of hook_comment_delete().
 */
function forum2_comment_delete($comment) {
  forum2_update_forum2_index($comment->nid);
}

/**
 * Updates the forum2_index table for a given node.
 */
function forum2_update_forum2_index($nid) {
  $count = (int)db_result(db_query('SELECT COUNT(cid) FROM {comments} WHERE nid = %d AND status = %d', $nid, COMMENT_PUBLISHED));
  if ($count > 0) {
    // Comments exist.
    $last_reply = db_fetch_object(db_query_range('SELECT timestamp FROM {comments} WHERE nid = %d AND status = %d ORDER BY cid DESC', $nid, COMMENT_PUBLISHED, 0, 1));
    $last_comment_timestamp = $last_reply->timestamp;
  }
  else {
    // Comments do not exist.
    $node = db_fetch_object(db_query('SELECT created FROM {node} WHERE nid = %d', $nid));
    $last_comment_timestamp = $node->created;
  }
  db_query('UPDATE {forum2_index} SET comment_count = %d, last_comment_timestamp = %d WHERE nid = %d', $count, $last_comment_timestamp, $nid);
}
